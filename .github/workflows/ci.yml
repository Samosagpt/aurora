name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  # Job 1: Linting and Code Quality
  lint:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: pip

    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 pylint mypy bandit[toml]

    - name: Run Black (code formatting check)
      run: black --check --diff .
      continue-on-error: true

    - name: Run isort (import sorting check)
      run: isort --check-only --diff .
      continue-on-error: true

    - name: Run Flake8 (style guide enforcement)
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics
      continue-on-error: true

    - name: Run Pylint (static analysis)
      run: pylint **/*.py --fail-under=7.0
      continue-on-error: true

    - name: Run Bandit (security linter)
      run: bandit -r . -f json -o bandit-report.json
      continue-on-error: true

    - name: Upload Bandit Report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: bandit-report
        path: bandit-report.json

  # Job 2: Unit Tests (Fast tests without heavy dependencies)
  test-unit:
    name: Unit Tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']
        exclude:
          # Reduce matrix size for faster CI
        - os: macos-latest
          python-version: '3.9'
        - os: macos-latest
          python-version: '3.10'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: pip

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-xdist pytest-timeout pytest-mock
        pip install -r requirements.txt || echo "requirements.txt partially installed"
      continue-on-error: true

    - name: Run unit tests
      run: |
        pytest -v -m "unit or not (integration or slow or requires_ollama or requires_gpu or desktop_only)" \
          --cov=. --cov-report=xml --cov-report=term-missing \
          --maxfail=5 --tb=short
      continue-on-error: true

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # Job 3: Integration Tests (with Ollama)
  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: pip

    - name: Install Ollama
      run: |
        curl -fsSL https://ollama.com/install.sh | sh

    - name: Start Ollama service
      run: |
        ollama serve &
        sleep 5

    - name: Pull required models
      run: |
        ollama pull llama3.2:1b
      continue-on-error: true

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-timeout
        pip install -r requirements.txt || echo "requirements.txt partially installed"
      continue-on-error: true

    - name: Run integration tests
      run: |
        pytest -v -m "integration or requires_ollama" \
          --timeout=300 --maxfail=3 --tb=short
      continue-on-error: true

  # Job 4: Build Check
  build:
    name: Build Check
    runs-on: ubuntu-latest
    needs: [lint, test-unit]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: pip

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel setuptools

    - name: Build package
      run: |
        python -m build
      continue-on-error: true

    - name: Check package
      run: |
        pip install twine
        twine check dist/*
      continue-on-error: true

  # Job 5: Security Scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install safety
      run: pip install safety

    - name: Check dependencies for vulnerabilities
      run: |
        pip install -r requirements.txt || true
        safety check --json || true
      continue-on-error: true

  # Job 6: Documentation Check
  docs:
    name: Documentation Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check README
      run: |
        if [ ! -f README.md ]; then
          echo "::error::README.md is missing"
          exit 1
        fi

    - name: Check CONTRIBUTING
      run: |
        if [ ! -f CONTRIBUTING.md ]; then
          echo "::warning::CONTRIBUTING.md is missing"
        fi

    - name: Check LICENSE
      run: |
        if [ ! -f LICENSE ]; then
          echo "::warning::LICENSE file is missing"
        fi

  # Summary Job
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [lint, test-unit, test-integration, build, security, docs]
    if: always()

    steps:
    - name: Check all jobs
      run: |
        echo "All CI jobs completed"
        echo "Lint: ${{ needs.lint.result }}"
        echo "Unit Tests: ${{ needs.test-unit.result }}"
        echo "Integration Tests: ${{ needs.test-integration.result }}"
        echo "Build: ${{ needs.build.result }}"
        echo "Security: ${{ needs.security.result }}"
        echo "Docs: ${{ needs.docs.result }}"
