[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "aurora"
version = "2.0.0"
description = "AURORA - Advanced Unified Reactive & Omnipotent Responsive Agent"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "Tejaji-0", email = "your.email@example.com"},
]
keywords = ["ai", "assistant", "llm", "multimodal", "agentic"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

[project.urls]
Homepage = "https://github.com/Samosagpt/aurora"
Repository = "https://github.com/Samosagpt/aurora"
Issues = "https://github.com/Samosagpt/aurora/issues"

# Testing configuration
[tool.pytest.ini_options]
testpaths = [".", "tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Coverage configuration
[tool.coverage.run]
source = ["."]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
    "*/.venv/*",
    "*/build/*",
    "*/dist/*",
    "*/Release/*",
    "*/_assets/*",
    "*/logs/*",
    "*/streamlit_*/frontend/*",
    "setup.py",
    "setup_*.py",
    "install_*.py",
    "installer*.py",
    "quick_rag_setup.py",
]
branch = true
parallel = true

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

# Black code formatter configuration
[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | logs
  | streamlit_*/frontend
)/
'''

# isort import sorting configuration
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = ["*/logs/*", "*/build/*", "*/_assets/*", "*/streamlit_*/frontend/*"]

# Flake8 configuration (in setup.cfg format)
# Note: flake8 doesn't support pyproject.toml yet

# MyPy type checking configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "streamlit.*",
    "ollama.*",
    "whisper.*",
    "diffusers.*",
    "transformers.*",
    "torch.*",
    "pyautogui.*",
    "pyttsx3.*",
]
ignore_missing_imports = true

# Pylint configuration
[tool.pylint.main]
max-line-length = 100
disable = [
    "C0103",  # Invalid name
    "C0114",  # Missing module docstring
    "C0115",  # Missing class docstring
    "C0116",  # Missing function docstring
    "R0913",  # Too many arguments
    "R0914",  # Too many local variables
    "W0703",  # Broad exception caught
]

[tool.pylint.format]
max-line-length = 100

[tool.pylint.basic]
good-names = ["i", "j", "k", "ex", "Run", "_", "id", "db", "x", "y"]

# Bandit security linter configuration
[tool.bandit]
exclude_dirs = ["tests", "logs", "build", "dist", "_assets"]
skips = ["B101", "B601"]  # Skip assert_used and subprocess without shell
